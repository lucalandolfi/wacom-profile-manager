#!/usr/bin/env bash

# Wacom Profile Manager

# Manage profiles for graphic tablets compatible with Wacom driver.

# Configuration files
CONFIG_DIR="$HOME/.config/wacom-profile-manager"

# Profiles location
PROFILES_DIR="${CONFIG_DIR}/profiles.d"

# State file, holds the last used profile
STATE="${CONFIG_DIR}/current_profile"

# Devices definition
DEVICES="${CONFIG_DIR}/devices"

# Notifications title
TITLE='Wacom Profile Manager'

if [[ ! -d "${CONFIG_DIR}" ]]; then
    mkdir -p "${CONFIG_DIR}"
fi

if [[ ! -d "$PROFILES_DIR" ]]; then
    mkdir "$PROFILES_DIR"
fi

# Load devices definition
if [[ ! -e "$DEVICES" ]]; then
    echo "WARNING: No devices defined in $DEVICES"
else
    source "$DEVICES"
fi

# Load profiles
declare -A PROFILES
for f in "${PROFILES_DIR}"/*; do
    if [[ -f "$f" ]]; then
        name=`basename $f`
        body=`cat $f`
        eval "profile_${name}(){ $body ; }"
        PROFILES[$name]=profile_$name
    fi
done

if [[ ${#PROFILES[@]} -eq 0 ]]; then
    echo "WARNING: No profiles found in $PROFILES_DIR"
fi

die () {
    echo "$1" 1>&2
    exit 1
}

usage () {
    echo "Usage: `basename $0` [command [profile]]"
    echo "Commands:"
    echo " profile profile_name  - set the profile profile_name"
    echo " next                  - cycle throught available profiles"
    echo " current               - print active profile"
    echo " help                  - print help"
    echo ""
    echo "Profiles:"
    current=`current_profile`
    for p in ${!PROFILES[@]}; do
        echo -n "    "
        [[ "$p" == "$current" ]] && echo -n "* "
        echo "$p"
    done
}

set_profile () {
    ${PROFILES["$1"]}
    # Save into state file
    echo "$1" > $STATE
    echo "Active profile: $1"
    notify-send -t 2000 "$TITLE" "Active profile: $1"
}

# Read current profile from state file
current_profile () {
    local current

    # state file does not exist
    if [[ ! -e $STATE ]]; then
        current=''
    else
        current=`cat $STATE`
        # state file does not contain a valid profile name
        if [[ ! -v PROFILES["$current"] ]]; then
            current=''
            rm -f $STATE
        fi
    fi
    echo "$current"
}

# Iterate through all profiles, starting with the current profile
iterate_profiles () {
    keys=(${!PROFILES[@]})
    len=${#keys[@]}

    current=`current_profile`
    # If current profile cannot be determined, start from the
    # first, with respect to keys hash ordering (which is different
    # from the installation order)
    if [[ -z "$current" ]]; then
        p=${keys[0]}
    else
        # find next valid profile
        switch=0
        i=0
        while :
        do
            if [[ $switch -eq 1 ]]; then
                p="${keys[$i]}"
                break
            fi
            if [[ ${keys[$i]} == "$current" ]]; then
                switch=1
            fi
            let "i=(i+1)%$len"
        done
    fi
    set_profile "$p"
}

# Arguments parsing
COMMAND="$1"
case "$COMMAND" in
    profile)
        PROFILE="$2"
        if [[ -v PROFILES["$PROFILE"] ]]; then
            set_profile "$PROFILE"
        else
            die "$PROFILE: invalid profile"
        fi
        ;;
    next)
        iterate_profiles
        ;;
    current)
        current_profile
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        usage
        exit 0
        ;;
esac
