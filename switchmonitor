#!/bin/bash

# Script data
CONFIG_DIR="$HOME/.config/wacom-profile-manager"

# State file, save the last set profile
STATE="${CONFIG_DIR}/current_output"

# Devices definition
DEVICES="${CONFIG_DIR}/devices"

if [[ ! -d "${CONFIG_DIR}" ]]; then
    mkdir -p "${CONFIG_DIR}"
fi

# Load device definition
source "$DEVICES"

# Detect active monitors
declare -a OUTPUTS
XRANDR=`xrandr | grep ' connected'`
OUTPUTS=(`echo "$XRANDR" | cut -d ' ' -f1`)

# Detect primary output
PRIMARY_OUTPUT=`echo "$XRANDR" | grep primary | cut -d ' ' -f1`

is_valid_output () {
    # check validity of an output
    for out in "${OUTPUTS[@]}"; do
        if [[ "$out" == "$1" ]]; then
            return 0
        fi
    done
    return 1
}

# Read current output from state file
current_output () {
    local current

    # state file does not exist
    if [[ ! -e $STATE ]]; then
        current=''
    else
        current=`cat $STATE`
        # saved output is not valid (either 
        # is not connected or garbage)
        if ! is_valid_output $current; then
            current=''
            rm -f "$STATE"
        fi

    fi

    echo "$current"
}

set_output () {
    xsetwacom set "$STYLUS" MapToOutput "$1"
    echo "Map to: $1"
    echo "$1" > "$STATE"
}

iterate_outputs () {
    local current="$(current_output)"
    len=${#OUTPUTS[@]}

    # If current output cannot be determined, start from the
    # first detected
    if [[ -z "$current" ]]; then
        p=${OUTPUTS[0]}
    else
        # find next valid output
        switch=0
        i=0
        while :
        do
            if [[ $switch -eq 1 ]]; then
                p="${OUTPUTS[$i]}"
                break
            fi
            if [[ ${OUTPUTS[$i]} == "$current" ]]; then
                switch=1
            fi
            let "i=(i+1)%$len"
        done
    fi
    set_output "$p"
}

usage () {
    echo "Usage: `basename $0` [command [profile]]"
    echo "Commands:"
    echo " list          - list available outputs"
    echo " output OUT    - map to output OUT"
    echo " next          - cycle throught available outputs"
    echo " current       - print active output"
    echo " help          - print help"
    echo ""
}

# Arguments parsing
COMMAND="$1"
case "$COMMAND" in
    list)
        echo "${OUTPUTS[@]}"
        ;;
    output)
        OUTPUT="$2"
        if is_valid_output "$OUTPUT"; then
            set_profile "$OUTPUT"
        else
            die "$OUTPUT: invalid profile"
        fi
        ;;
    primary)
        set_output "$PRIMARY"
        ;;
    next)
        iterate_outputs
        ;;
    current)
        current_output
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        usage
        exit 0
        ;;
esac
